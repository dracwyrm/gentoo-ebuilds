From 747264213cbbf09dcc06b003903b4385ca307562 Mon Sep 17 00:00:00 2001
From: Philip Rebohle <philip.rebohle@tu-dortmund.de>
Date: Fri, 17 Aug 2018 16:59:06 +0200
Subject: [PATCH 1/5] [meta] Allow setup script to run from other working
 directories

Fixes #573.
---
 utils/setup_dxvk.verb | 11 +++++++++--
 1 file changed, 9 insertions(+), 2 deletions(-)

diff --git a/utils/setup_dxvk.verb b/utils/setup_dxvk.verb
index e780dfa0..5d75268f 100644
--- a/utils/setup_dxvk.verb
+++ b/utils/setup_dxvk.verb
@@ -15,16 +15,23 @@ w_metadata setup_dxvk dlls \
     installed_file5="$W_SYSTEM32_DLLS_WIN/d3d10core.dll" \
     homepage="https://github.com/doitsujin/dxvk"
 
+DXVK_ROOT_DIR=`dirname "$(readlink -f $1)"`
+
 load_setup_dxvk()
 {
+    if [ ! -e "$DXVK_ROOT_DIR/x64" ] || [ ! -e "$DXVK_ROOT_DIR/x32" ]; then
+        (>&2 echo "$DXVK_ROOT_DIR/x32 or $DXVK_ROOT_DIR/x64 directory not found.")
+        exit 1
+    fi
+
     for f in "$file1" "$file2" "$file3" "$file4" "$file5"; do
-        w_try cp "x32/$f" "$W_SYSTEM32_DLLS/$f"
+        w_try cp "$DXVK_ROOT_DIR/x32/$f" "$W_SYSTEM32_DLLS/$f"
     done
 
     if [ "$W_ARCH" = "win64" ]; then
         dxvk64_dir="/usr/lib64/wine/dxvk"
         for f in "$file1" "$file2" "$file3" "$file4" "$file5"; do
-            w_try cp "x64/$f" "$W_SYSTEM64_DLLS/$f"
+            w_try cp "$DXVK_ROOT_DIR/x64/$f" "$W_SYSTEM64_DLLS/$f"
         done
     fi
 

From 55632c6b6147c5156eb3d42f14433ebd734d505c Mon Sep 17 00:00:00 2001
From: Philip Rebohle <philip.rebohle@tu-dortmund.de>
Date: Fri, 17 Aug 2018 19:42:32 +0200
Subject: [PATCH 2/5] [util] Add log message when loading a configuration file

---
 src/util/config/config.cpp | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/src/util/config/config.cpp b/src/util/config/config.cpp
index 81dc64e6..20927dba 100644
--- a/src/util/config/config.cpp
+++ b/src/util/config/config.cpp
@@ -189,6 +189,10 @@ namespace dxvk {
 
     if (!stream)
       return config;
+    
+    // Inform the user that we loaded a file, might
+    // help when debugging configuration issues
+    Logger::info(str::format("Found config file: ", filePath));
 
     // Parse the file line by line
     std::string line;

From 2ff614b2417992c3bb8f795f5889cb5263c98936 Mon Sep 17 00:00:00 2001
From: jacekcw <41376520+jacekcw@users.noreply.github.com>
Date: Fri, 17 Aug 2018 19:55:37 +0200
Subject: [PATCH 3/5] [build] Use native Vulkan ABI for winelib builds (#520)

Allows 32-bit winelib builds to run.
---
 meson.build                             |  2 +-
 src/dxvk/vulkan/dxvk_vulkan_loader.cpp  | 20 ++++++++++++++++----
 src/dxvk/vulkan/dxvk_vulkan_loader_fn.h | 15 +++++++++++++++
 3 files changed, 32 insertions(+), 5 deletions(-)

diff --git a/meson.build b/meson.build
index e4f56856..23e848ed 100644
--- a/meson.build
+++ b/meson.build
@@ -26,7 +26,7 @@ else
 endif
 
 if meson.get_cross_property('winelib', false)
-  lib_vulkan  = declare_dependency(link_args: [ '-lvulkan-1' ])
+  lib_vulkan  = declare_dependency(link_args: [ '-lwinevulkan' ])
   lib_d3d11   = declare_dependency(link_args: [ '-ld3d11' ])
   lib_dxgi    = declare_dependency(link_args: [ '-ldxgi' ])
   lib_d3dcompiler_43 = declare_dependency(link_args: [ '-L'+dxvk_library_path, '-ld3dcompiler_43' ])
diff --git a/src/dxvk/vulkan/dxvk_vulkan_loader.cpp b/src/dxvk/vulkan/dxvk_vulkan_loader.cpp
index 70df7aa4..d3a1ca11 100644
--- a/src/dxvk/vulkan/dxvk_vulkan_loader.cpp
+++ b/src/dxvk/vulkan/dxvk_vulkan_loader.cpp
@@ -1,9 +1,21 @@
 #include "dxvk_vulkan_loader.h"
 
 namespace dxvk::vk {
-  
+
+#if defined(__WINE__)
+
+  extern "C"
+  PFN_vkVoidFunction native_vkGetInstanceProcAddrWINE(VkInstance instance, const char *name);
+  static const PFN_vkGetInstanceProcAddr GetInstanceProcAddr = native_vkGetInstanceProcAddrWINE;
+
+#else
+
+  static const PFN_vkGetInstanceProcAddr GetInstanceProcAddr = vkGetInstanceProcAddr;
+
+#endif
+
   PFN_vkVoidFunction LibraryLoader::sym(const char* name) const {
-    return ::vkGetInstanceProcAddr(nullptr, name);
+    return dxvk::vk::GetInstanceProcAddr(nullptr, name);
   }
   
   
@@ -12,13 +24,13 @@ namespace dxvk::vk {
   
   
   PFN_vkVoidFunction InstanceLoader::sym(const char* name) const {
-    return ::vkGetInstanceProcAddr(m_instance, name);
+    return dxvk::vk::GetInstanceProcAddr(m_instance, name);
   }
   
   
   DeviceLoader::DeviceLoader(VkInstance instance, VkDevice device)
   : m_getDeviceProcAddr(reinterpret_cast<PFN_vkGetDeviceProcAddr>(
-      ::vkGetInstanceProcAddr(instance, "vkGetDeviceProcAddr"))),
+      dxvk::vk::GetInstanceProcAddr(instance, "vkGetDeviceProcAddr"))),
     m_device(device) { }
   
   
diff --git a/src/dxvk/vulkan/dxvk_vulkan_loader_fn.h b/src/dxvk/vulkan/dxvk_vulkan_loader_fn.h
index 105d0d9f..ecdd82a3 100644
--- a/src/dxvk/vulkan/dxvk_vulkan_loader_fn.h
+++ b/src/dxvk/vulkan/dxvk_vulkan_loader_fn.h
@@ -1,8 +1,23 @@
 #pragma once
 
+/*
+ * In 32-bit winelib build, alignment of Vulkan structures may be different than what
+ * native C++ compiler expects. Wine exposes an extension, intended for winelib
+ * applications, that exposes native Vulkan APIs with win32 additions, but using
+ * native ABI.
+ */
+#ifdef __WINE__
+#pragma push_macro("_WIN32")
+#undef _WIN32
+#endif
+
 #define VK_USE_PLATFORM_WIN32_KHR 1
 #include <vulkan/vulkan.h>
 
+#ifdef __WINE__
+#pragma pop_macro("_WIN32")
+#endif
+
 #define VULKAN_FN(name) \
   VulkanFn<::PFN_ ## name> name = sym(#name)
 

From f6c50b0896cecf7ddc3a631c685dd5edca6cf592 Mon Sep 17 00:00:00 2001
From: Jacek Caban <jacek@codeweavers.com>
Date: Fri, 27 Jul 2018 16:33:24 +0200
Subject: [PATCH 4/5] [build] Provide build-wine32.txt file.

---
 build-wine32.txt | 20 ++++++++++++++++++++
 1 file changed, 20 insertions(+)
 create mode 100644 build-wine32.txt

diff --git a/build-wine32.txt b/build-wine32.txt
new file mode 100644
index 00000000..00cf6cc8
--- /dev/null
+++ b/build-wine32.txt
@@ -0,0 +1,20 @@
+[binaries]
+c = 'winegcc'
+cpp = 'wineg++'
+ar = 'ar'
+strip = 'strip'
+exe_wrapper = 'wine'
+
+[properties]
+winelib = true
+
+c_args=['-m32']
+cpp_args=['-m32', '--no-gnu-unique']
+cpp_link_args=['-m32', '-mwindows']
+
+[host_machine]
+system = 'linux'
+cpu_family = 'x86'
+cpu = 'i686'
+endian = 'little'
+

From 4c8bf44738ebc691341180a85ddfc6ef9e360f23 Mon Sep 17 00:00:00 2001
From: Philip Rebohle <philip.rebohle@tu-dortmund.de>
Date: Sat, 18 Aug 2018 07:47:42 +0200
Subject: [PATCH 5/5] [meta] Copy verb even when using --no-package

---
 package-release.sh | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

diff --git a/package-release.sh b/package-release.sh
index a03fdad1..02ed6a57 100755
--- a/package-release.sh
+++ b/package-release.sh
@@ -44,8 +44,11 @@ function build_arch {
   rm -R "$DXVK_BUILD_DIR/install.$1"
 }
 
-function package {
+function build_verb {
   cp "$DXVK_SRC_DIR/utils/setup_dxvk.verb" "$DXVK_BUILD_DIR/setup_dxvk.verb"
+}
+
+function package {
   cd "$DXVK_BUILD_DIR/.."
   tar -czf "$DXVK_ARCHIVE_PATH" "dxvk-$DXVK_VERSION"
   rm -R "dxvk-$DXVK_VERSION"
@@ -53,6 +56,7 @@ function package {
 
 build_arch 64
 build_arch 32
+build_verb
 
 if [ "$3" != "--no-package" ]; then
   package
