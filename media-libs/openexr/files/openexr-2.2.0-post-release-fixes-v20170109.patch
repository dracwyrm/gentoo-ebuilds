diff --git a/IlmImf/CMakeLists.txt b/IlmImf/CMakeLists.txt
index 18d90ed..9b2fb11 100644
--- a/IlmImf/CMakeLists.txt
+++ b/IlmImf/CMakeLists.txt
@@ -8,8 +8,8 @@ ADD_EXECUTABLE ( b44ExpLogTable
 
 TARGET_LINK_LIBRARIES ( b44ExpLogTable
   Half
-  Iex${ILMBASE_LIBSUFFIX}
   IlmThread${ILMBASE_LIBSUFFIX}
+  Iex${ILMBASE_LIBSUFFIX}
   ${PTHREAD_LIB}
 )
 
@@ -25,8 +25,8 @@ ADD_EXECUTABLE ( dwaLookups
 
 TARGET_LINK_LIBRARIES ( dwaLookups
   Half
-  Iex${ILMBASE_LIBSUFFIX}
   IlmThread${ILMBASE_LIBSUFFIX}
+  Iex${ILMBASE_LIBSUFFIX}
   ${PTHREAD_LIB}
 )
 
diff --git a/IlmImf/ImfCRgbaFile.h b/IlmImf/ImfCRgbaFile.h
index 5ac2bf8..db58247 100644
--- a/IlmImf/ImfCRgbaFile.h
+++ b/IlmImf/ImfCRgbaFile.h
@@ -98,7 +98,7 @@ typedef struct ImfRgba ImfRgba;
 
 #define IMF_INCREASING_Y	0
 #define IMF_DECREASING_Y	1
-#define IMF_RAMDOM_Y		2
+#define IMF_RANDOM_Y		2
 
 
 /*
diff --git a/IlmImf/ImfDeepTiledInputPart.cpp b/IlmImf/ImfDeepTiledInputPart.cpp
index 1262f23..0f0c012 100644
--- a/IlmImf/ImfDeepTiledInputPart.cpp
+++ b/IlmImf/ImfDeepTiledInputPart.cpp
@@ -90,7 +90,7 @@ DeepTiledInputPart::isComplete () const
 unsigned int
 DeepTiledInputPart::tileXSize () const
 {
-    return file->isComplete();
+    return file->tileXSize();
 }
 
 
diff --git a/IlmImf/ImfDwaCompressor.cpp b/IlmImf/ImfDwaCompressor.cpp
index 1c1bd45..942d1c6 100644
--- a/IlmImf/ImfDwaCompressor.cpp
+++ b/IlmImf/ImfDwaCompressor.cpp
@@ -867,14 +867,14 @@ DwaCompressor::LossyDctDecoderBase::execute ()
                     //
                     // Zig-Zag indices in normal layout are as follows:
                     //
-                    // 0   1   3   6   10  15  21  28
-                    // 2   4   7   11  16  22  29  36
-                    // 5   8   12  17  23  30  37  43
-                    // 9   13  18  24  31  38  44  49
-                    // 14  19  25  32  39  45  50  54
-                    // 20  26  33  40  46  51  55  58
-                    // 27  34  41  47  52  56  59  61
-                    // 35  42  48  53  57  60  62  63
+                    // 0   1   5   6   14  15  27  28
+                    // 2   4   7   13  16  26  29  42
+                    // 3   8   12  17  25  30  41  43
+                    // 9   11  18  24  31  40  44  53
+                    // 10  19  23  32  39  45  52  54
+                    // 20  22  33  38  46  51  55  60
+                    // 21  34  37  47  50  56  59  61
+                    // 35  36  48  49  57  58  62  63
                     //
                     // If lastNonZero is less than the first item on
                     // each row, we know that the whole row is zero and 
@@ -888,25 +888,25 @@ DwaCompressor::LossyDctDecoderBase::execute ()
                     //
                     // where:
                     //
-                    //    const int rowStartIdx[] = {2, 5, 9, 14, 20, 27, 35};
+                    //    const int rowStartIdx[] = {2, 3, 9, 10, 20, 21, 35};
                     //    const int rowsEmpty[]   = {7, 6, 5,  4,  3,  2,  1};
                     //
 
                     if (lastNonZero < 2)
                         dctInverse8x8_7(_dctData[comp]._buffer);
-                    else if (lastNonZero < 5)
+                    else if (lastNonZero < 3)
                         dctInverse8x8_6(_dctData[comp]._buffer);
                     else if (lastNonZero < 9)
                         dctInverse8x8_5(_dctData[comp]._buffer);
-                    else if (lastNonZero < 14)
+                    else if (lastNonZero < 10)
                         dctInverse8x8_4(_dctData[comp]._buffer);
                     else if (lastNonZero < 20)
                         dctInverse8x8_3(_dctData[comp]._buffer);
-                    else if (lastNonZero < 27)
+                    else if (lastNonZero < 21)
                         dctInverse8x8_2(_dctData[comp]._buffer);
                     else if (lastNonZero < 35)
                         dctInverse8x8_1(_dctData[comp]._buffer);
-                    else
+                    else 
                         dctInverse8x8_0(_dctData[comp]._buffer);
                 }
             }
@@ -947,7 +947,7 @@ DwaCompressor::LossyDctDecoderBase::execute ()
                 }
                 else
                 {
-                    #if IMF_HAVE_SSE2
+                    #ifdef IMF_HAVE_SSE2
 
                         __m128i *dst = (__m128i*)&rowBlock[comp][blockx*64];
 
@@ -1922,7 +1922,7 @@ DwaCompressor::compress
     if (outBufferSize > _outBufferSize) 
     {
         _outBufferSize = outBufferSize;
-        if (_outBuffer == 0)
+        if (_outBuffer != 0)
             delete[] _outBuffer;       
         _outBuffer = new char[outBufferSize];
     }
diff --git a/IlmImf/ImfDwaCompressorSimd.h b/IlmImf/ImfDwaCompressorSimd.h
index 93246f6..b07fa4e 100644
--- a/IlmImf/ImfDwaCompressorSimd.h
+++ b/IlmImf/ImfDwaCompressorSimd.h
@@ -334,34 +334,37 @@ interleaveByte2 (char *dst, char *src0, char *src1, int numBytes)
         // use aligned loads
         //
     
-        for (int x = 0; x < 8; ++x)
+        for (int x = 0; x < std::min (numBytes, 8); ++x)
         {
             dst[2 * x]     = src0[x];
             dst[2 * x + 1] = src1[x];
         }
 
-        dst_epi8  = (__m128i*)&dst[16];
-        src0_epi8 = (__m128i*)&src0[8];
-        src1_epi8 = (__m128i*)&src1[8];
-        sseWidth  =  (numBytes - 8) / 16;
-
-        for (int x=0; x<sseWidth; ++x)
+        if (numBytes > 8) 
         {
-            _mm_stream_si128 (&dst_epi8[2 * x],
-                              _mm_unpacklo_epi8 (src0_epi8[x], src1_epi8[x]));
+            dst_epi8  = (__m128i*)&dst[16];
+            src0_epi8 = (__m128i*)&src0[8];
+            src1_epi8 = (__m128i*)&src1[8];
+            sseWidth  =  (numBytes - 8) / 16;
 
-            _mm_stream_si128 (&dst_epi8[2 * x + 1],
-                              _mm_unpackhi_epi8 (src0_epi8[x], src1_epi8[x]));
-        }
+            for (int x=0; x<sseWidth; ++x)
+            {
+                _mm_stream_si128 (&dst_epi8[2 * x],
+                                  _mm_unpacklo_epi8 (src0_epi8[x], src1_epi8[x]));
 
-        //
-        // Then do run the leftovers one at a time
-        //
+                _mm_stream_si128 (&dst_epi8[2 * x + 1],
+                                  _mm_unpackhi_epi8 (src0_epi8[x], src1_epi8[x]));
+            }
 
-        for (int x = 16 * sseWidth + 8; x < numBytes; ++x)
-        {
-            dst[2 * x]     = src0[x];
-            dst[2 * x + 1] = src1[x];
+            //
+            // Then do run the leftovers one at a time
+            //
+
+            for (int x = 16 * sseWidth + 8; x < numBytes; ++x)
+            {
+                dst[2 * x]     = src0[x];
+                dst[2 * x + 1] = src1[x];
+            }
         }
     }
     else
diff --git a/IlmImf/ImfFastHuf.cpp b/IlmImf/ImfFastHuf.cpp
index 86c84dc..10bc318 100644
--- a/IlmImf/ImfFastHuf.cpp
+++ b/IlmImf/ImfFastHuf.cpp
@@ -107,7 +107,7 @@ FastHufDecoder::FastHufDecoder
     for (int i = 0; i <= MAX_CODE_LEN; ++i)
     {
         codeCount[i] = 0;
-        base[i]      = 0xffffffffffffffffL;
+        base[i]      = 0xffffffffffffffffULL;
         offset[i]    = 0;
     }
 
@@ -352,7 +352,7 @@ FastHufDecoder::buildTables (Int64 *base, Int64 *offset)
 
     for (int i = 0; i <= MAX_CODE_LEN; ++i)
     {
-        if (base[i] != 0xffffffffffffffffL)
+        if (base[i] != 0xffffffffffffffffULL)
         {
             _ljBase[i] = base[i] << (64 - i);
         }
@@ -362,7 +362,7 @@ FastHufDecoder::buildTables (Int64 *base, Int64 *offset)
             // Unused code length - insert dummy values
             //
 
-            _ljBase[i] = 0xffffffffffffffffL;
+            _ljBase[i] = 0xffffffffffffffffULL;
         }
     }
 
@@ -417,7 +417,7 @@ FastHufDecoder::buildTables (Int64 *base, Int64 *offset)
 
     int minIdx = TABLE_LOOKUP_BITS;
 
-    while (minIdx > 0 && _ljBase[minIdx] == 0xffffffffffffffffL)
+    while (minIdx > 0 && _ljBase[minIdx] == 0xffffffffffffffffULL)
         minIdx--;
 
     if (minIdx < 0)
@@ -427,7 +427,7 @@ FastHufDecoder::buildTables (Int64 *base, Int64 *offset)
         // Set the min value such that the table is never tested.
         //
 
-        _tableMin = 0xffffffffffffffffL;
+        _tableMin = 0xffffffffffffffffULL;
     }
     else
     {
diff --git a/IlmImf/ImfOptimizedPixelReading.h b/IlmImf/ImfOptimizedPixelReading.h
index 1c83497..334336a 100644
--- a/IlmImf/ImfOptimizedPixelReading.h
+++ b/IlmImf/ImfOptimizedPixelReading.h
@@ -60,7 +60,7 @@ public:
 };
 
 
-#if IMF_HAVE_SSE2
+#ifdef IMF_HAVE_SSE2
 
 
 //------------------------------------------------------------------------
diff --git a/IlmImf/ImfScanLineInputFile.cpp b/IlmImf/ImfScanLineInputFile.cpp
index 9e13b9f..e6a5129 100644
--- a/IlmImf/ImfScanLineInputFile.cpp
+++ b/IlmImf/ImfScanLineInputFile.cpp
@@ -1264,7 +1264,7 @@ detectOptimizationMode (const vector<sliceOptimizationData>& optData)
     OptimizationMode w;
     
     // need to be compiled with SSE optimisations: if not, just returns false
-#if IMF_HAVE_SSE2
+#ifdef IMF_HAVE_SSE2
     
     
     // only handle reading 3,4,6 or 8 channels
diff --git a/IlmImf/ImfSimd.h b/IlmImf/ImfSimd.h
index 09b1042..322d090 100644
--- a/IlmImf/ImfSimd.h
+++ b/IlmImf/ImfSimd.h
@@ -50,7 +50,7 @@
 
 extern "C"
 {
-#if IMF_HAVE_SSE2
+#ifdef IMF_HAVE_SSE2
     #include <emmintrin.h>
     #include <mmintrin.h>
 #endif
diff --git a/IlmImfTest/Makefile.am b/IlmImfTest/Makefile.am
index 3051d60..9ab5c4c 100644
--- a/IlmImfTest/Makefile.am
+++ b/IlmImfTest/Makefile.am
@@ -74,6 +74,8 @@ EXTRA_DIST = comp_none.exr comp_piz.exr comp_rle.exr comp_zip.exr \
 	     comp_zips.exr lineOrder_decreasing.exr lineOrder_increasing.exr \
 	     test_native1.exr test_native2.exr invalid.exr \
 	     tiled.exr comp_b44.exr comp_b44_piz.exr \
+	     comp_dwaa_piz.exr comp_dwaa_v1.exr comp_dwaa_v2.exr \
+	     comp_dwab_piz.exr comp_dwab_v1.exr comp_dwab_v2.exr \
              v1.7.test.planar.exr  v1.7.test.tiled.exr v1.7.test.1.exr v1.7.test.interleaved.exr \
              invalid_shared_attrs_multipart.exr \
 	     tiled_with_scanlineimage_type.exr scanline_with_tiledimage_type.exr \
diff --git a/IlmImfTest/testDwaCompressorSimd.cpp b/IlmImfTest/testDwaCompressorSimd.cpp
index c2dfaea..e144aa8 100644
--- a/IlmImfTest/testDwaCompressorSimd.cpp
+++ b/IlmImfTest/testDwaCompressorSimd.cpp
@@ -171,8 +171,9 @@ testCsc()
 void
 testInterleave()
 {
-    const int bufferLen = 100000;
-    const int numIter   = 10000;
+    const int bufferLen     = 100000;
+    const int randomNumIter = 10000;
+    const int lengthNumIter = 128;
     Rand48    rand48(0);
     char     *srcA    = new char[bufferLen];
     char     *srcB    = new char[bufferLen];
@@ -189,7 +190,7 @@ testInterleave()
         dst[2*i+1] = srcB[i];
     }
 
-    for (int iter=0; iter<numIter; ++iter)
+    for (int iter=0; iter<randomNumIter; ++iter)
     {
         memset(test, 0, 2*bufferLen);
 
@@ -203,6 +204,46 @@ testInterleave()
         }
     }
 
+    //
+    // Test increasing length buffers, with varying alignment
+    // on all the buffers.
+    //
+    for (int len=1; len<lengthNumIter; ++len) 
+    {
+        for (int offset=0; offset<16*16*16; ++offset) 
+        {
+            int offsetA    =  offset        % 16;
+            int offsetB    = (offset /  16) % 16;
+            int offsetTest = (offset / 256) % 16;
+
+            memset(srcA, 255, bufferLen);
+            memset(srcB, 255, bufferLen);
+            memset(dst,  0,   2*bufferLen);
+            memset(test, 0,   2*bufferLen);
+
+            char *a   = srcA + offsetA;
+            char *b   = srcB + offsetB;
+            char *out = test + offsetTest;
+            
+            for (int i=0; i<len; ++i) 
+            {
+                a[i] = (char)rand48.nextf(0.0, 255.0);
+                b[i] = (char)rand48.nextf(0.0, 255.0);
+
+                dst[2*i]   = a[i];
+                dst[2*i+1] = b[i];
+            }
+
+            interleaveByte2(out, a, b, len);
+            
+            for (int i=0; i<2*len+8; ++i) 
+            {
+                assert( dst[2*i]   == out[2*i] );
+                assert( dst[2*i+1] == out[2*i+1] );
+            }
+        }
+    }
+
     delete[] srcA;
     delete[] srcB;
     delete[] dst;
diff --git a/Makefile.am b/Makefile.am
index 3a232af..8e42dae 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -13,7 +13,7 @@ DIST_SUBDIRS = \
 
 EXTRA_DIST = \
 	AUTHORS COPYING ChangeLog INSTALL LICENSE NEWS PATENTS \
-        README README.CVS README.OSX README.win32 \
+        README README.CVS README.OSX \
 	README.git README.namespacing README.cmake.txt \
 	bootstrap openexr.m4 \
 	config.windows/OpenEXRConfig.h \
diff --git a/configure.ac b/configure.ac
index 880cb1b..4b3a266 100644
--- a/configure.ac
+++ b/configure.ac
@@ -188,7 +188,7 @@ AC_COMPILE_IFELSE(
                  __asm__(
                      "xgetbv     \n"
                      "vzeroupper  "
-                     : "=a"(eax), "=d"(edx) : "c"(n) : );
+                     : "=a"(eax), "=d"(edx) : "c"(n));
              #else
                  #error No GCC style inline asm supported for AVX instructions
              #endif
